<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Deliberation;
use App\Models\Niveau;
use App\Models\SessionExam;
use App\Models\AnneeUniversitaire;
use App\Models\User;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class DeliberationSeeder extends Seeder
{
    /**
     * Cr√©e automatiquement toutes les d√©lib√©rations n√©cessaires selon les r√®gles m√©tier
     * Version adapt√©e pour le mod√®le Deliberation refactoris√©
     */
    public function run()
    {
        $this->command->info('üéØ D√©but de la cr√©ation des d√©lib√©rations...');

        // R√©cup√©rer l'ann√©e universitaire active
        $anneeActive = AnneeUniversitaire::where('is_active', true)->first();

        if (!$anneeActive) {
            $this->command->error('‚ùå Aucune ann√©e universitaire active trouv√©e. Veuillez d\'abord ex√©cuter AnneeUniversitaireSeeder.');
            return;
        }

        $this->command->info("üìÖ Ann√©e universitaire active : {$anneeActive->date_start->format('Y')} - {$anneeActive->date_end->format('Y')}");

        // R√©cup√©rer tous les niveaux qui peuvent avoir des d√©lib√©rations
        $niveauxAvecDeliberation = Niveau::where('is_active', true)
            ->where('has_rattrapage', true)
            ->where('is_concours', false)
            ->with('parcours')
            ->get();

        if ($niveauxAvecDeliberation->isEmpty()) {
            $this->command->warn('‚ö†Ô∏è Aucun niveau n√©cessitant des d√©lib√©rations trouv√©.');
            $this->command->info('üí° V√©rifiez que vos niveaux ont has_rattrapage=true et is_concours=false');
            return;
        }

        $this->command->info("üéì Niveaux concern√©s : " . $niveauxAvecDeliberation->pluck('nom')->join(', '));

        // R√©cup√©rer toutes les sessions de rattrapage pour l'ann√©e active
        $sessionsRattrapage = SessionExam::where('annee_universitaire_id', $anneeActive->id)
            ->where('type', 'Rattrapage')
            ->get();

        if ($sessionsRattrapage->isEmpty()) {
            $this->command->error('‚ùå Aucune session de rattrapage trouv√©e pour cette ann√©e universitaire.');
            return;
        }

        $this->command->info("üìù Sessions de rattrapage : " . $sessionsRattrapage->count());

        $compteurDeliberations = 0;
        $deliberationsCreees = [];

        // D√©finir les param√®tres par d√©faut pour les d√©lib√©rations
        // Ces valeurs seront remplac√©es par des configurations d'application √† l'avenir
        $parametresDefaut = $this->obtenirParametresDefaut();

        // Cr√©er les d√©lib√©rations selon les r√®gles m√©tier
        foreach ($niveauxAvecDeliberation as $niveau) {
            // Adapter les param√®tres selon le niveau si n√©cessaire
            $parametresNiveau = $this->ajusterParametresSelonNiveau($parametresDefaut, $niveau);

            foreach ($sessionsRattrapage as $session) {
                // V√©rifier si la d√©lib√©ration existe d√©j√†
                $deliberationExistante = Deliberation::where('niveau_id', $niveau->id)
                    ->where('session_id', $session->id)
                    ->where('annee_universitaire_id', $anneeActive->id)
                    ->first();

                if ($deliberationExistante) {
                    $this->command->warn("‚ö†Ô∏è D√©lib√©ration d√©j√† existante : {$niveau->nom} - Session {$session->type}");
                    continue;
                }

                // Calculer la date de d√©lib√©ration
                $dateDeliberation = $this->calculerDateDeliberation($session);

                // Cr√©er la d√©lib√©ration avec les nouveaux champs
                $deliberation = Deliberation::create([
                    'niveau_id' => $niveau->id,
                    'session_id' => $session->id,
                    'annee_universitaire_id' => $anneeActive->id,
                    'date_deliberation' => $dateDeliberation,
                    'statut' => Deliberation::STATUT_PROGRAMMEE,
                    'observations' => $this->genererObservationsParDefaut($niveau, $session, $parametresNiveau),

                    // Param√®tres de d√©lib√©ration
                    'seuil_admission' => $parametresNiveau['seuil_admission'],
                    'seuil_rachat' => $parametresNiveau['seuil_rachat'],
                    'pourcentage_ue_requises' => $parametresNiveau['pourcentage_ue_requises'],
                    'appliquer_regles_auto' => $parametresNiveau['appliquer_regles_auto'],

                    // Statistiques initialis√©es
                    'nombre_admis' => 0,
                    'nombre_ajournes' => 0,
                    'nombre_exclus' => 0,
                    'nombre_rachats' => 0
                ]);

                $deliberationsCreees[] = [
                    'niveau' => $niveau->nom,
                    'session' => $session->type,
                    'date' => $dateDeliberation->format('d/m/Y H:i'),
                    'seuil_admission' => $parametresNiveau['seuil_admission'],
                    'seuil_rachat' => $parametresNiveau['seuil_rachat']
                ];

                $compteurDeliberations++;

                $this->command->info("‚úÖ D√©lib√©ration cr√©√©e : {$niveau->nom} - {$session->type} - {$dateDeliberation->format('d/m/Y')}");
            }
        }

        // Rapport final et suggestions
        $this->afficherRapportFinal($compteurDeliberations, $deliberationsCreees, $anneeActive);
        $this->afficherSuggestions();
    }

    /**
     * Obtient les param√®tres par d√©faut pour les d√©lib√©rations
     * Ces param√®tres seront ult√©rieurement configurables dans l'application
     */
    private function obtenirParametresDefaut()
    {
        return [
            'seuil_admission' => 10.00,      // Moyenne minimale pour admission directe
            'seuil_rachat' => 9.75,          // Moyenne minimale pour rachat (admission conditionnelle)
            'pourcentage_ue_requises' => 80,  // % d'UE √† valider pour √™tre admis
            'appliquer_regles_auto' => true   // Appliquer automatiquement les r√®gles
        ];
    }

    /**
     * Ajuste les param√®tres selon le niveau d'√©tudes
     * Permet une personnalisation des r√®gles par niveau
     */
    private function ajusterParametresSelonNiveau($parametresDefaut, $niveau)
    {
        $parametres = $parametresDefaut;

        // Exemples d'ajustements sp√©cifiques par niveau
        switch ($niveau->abr) {
            case 'L2':
                // Plus flexible pour le niveau L2
                $parametres['seuil_rachat'] = 9.50;
                break;
            case 'M2':
                // Plus strict pour le niveau M2
                $parametres['seuil_admission'] = 10.50;
                $parametres['pourcentage_ue_requises'] = 90;
                break;
            case 'D1':
                // Tr√®s strict pour le doctorat
                $parametres['seuil_admission'] = 12.00;
                $parametres['seuil_rachat'] = 11.00;
                $parametres['pourcentage_ue_requises'] = 100;
                break;
        }

        return $parametres;
    }

    /**
     * Calcule la date de d√©lib√©ration en fonction de la session
     */
    private function calculerDateDeliberation($session)
    {
        // Commencer 3 jours apr√®s la fin de session pour laisser le temps aux corrections
        $dateBase = Carbon::parse($session->date_end)->addDays(3);

        // Ajuster pour √©viter les week-ends
        while ($dateBase->isWeekend()) {
            $dateBase->addDay();
        }

        // Programmer √† 14h00 par d√©faut
        $dateBase->setTime(14, 0, 0);

        return $dateBase;
    }

    /**
     * G√©n√®re des observations par d√©faut avec informations sur les crit√®res
     */
    private function genererObservationsParDefaut($niveau, $session, $parametres)
    {
        $observations = "D√©lib√©ration programm√©e automatiquement pour le niveau {$niveau->nom} - Session {$session->type}.\n";

        if ($niveau->has_parcours) {
            $observations .= "Niveau avec parcours multiples - Attention aux sp√©cificit√©s de chaque parcours.\n";
        }

        // Inclure les crit√®res sp√©cifiques de la d√©lib√©ration
        $observations .= "Crit√®res de validation :\n";
        $observations .= "- Moyenne minimale pour admission directe : {$parametres['seuil_admission']}\n";
        $observations .= "- Moyenne minimale pour rachat possible : {$parametres['seuil_rachat']}\n";
        $observations .= "- Pourcentage d'UE requises : {$parametres['pourcentage_ue_requises']}%\n";

        $observations .= "\nD√©cisions possibles : Admis, Admis conditionnellement, Ajourn√©, Exclu.\n";

        return $observations;
    }

    /**
     * Affiche le rapport de cr√©ation des d√©lib√©rations
     */
    private function afficherRapportFinal($compteur, $deliberations, $anneeActive)
    {
        $this->command->info('');
        $this->command->info('üìä ===== RAPPORT DE CR√âATION DES D√âLIB√âRATIONS =====');
        $this->command->info("üéì Ann√©e universitaire : {$anneeActive->date_start->format('Y')} - {$anneeActive->date_end->format('Y')}");
        $this->command->info("üìù Nombre de d√©lib√©rations cr√©√©es : {$compteur}");
        $this->command->info('');

        if (!empty($deliberations)) {
            $this->command->info('üìã D√©tail des d√©lib√©rations cr√©√©es :');
            foreach ($deliberations as $delib) {
                $this->command->info(
                    "   ‚Ä¢ {$delib['niveau']} - {$delib['session']} - {$delib['date']} " .
                    "(Seuils: {$delib['seuil_admission']}/{$delib['seuil_rachat']})"
                );
            }
        }

        $this->command->info('');
        $this->command->info('‚úÖ Toutes les d√©lib√©rations ont √©t√© cr√©√©es avec succ√®s !');
    }

    /**
     * Affiche des suggestions pour l'utilisation des d√©lib√©rations
     */
    private function afficherSuggestions()
    {
        $this->command->info('');
        $this->command->info('üí° ===== SUGGESTIONS POUR LA SUITE =====');
        $this->command->info('üîß Vous pouvez maintenant :');
        $this->command->info('   1. Modifier les dates de d√©lib√©ration via l\'interface d\'administration');
        $this->command->info('   2. Ajuster les seuils d\'admission et de rachat pour chaque d√©lib√©ration');
        $this->command->info('   3. Personnaliser le pourcentage d\'UE requises selon les niveaux');
        $this->command->info('   4. Planifier les membres du jury de d√©lib√©ration');
        $this->command->info('');
        $this->command->info('üìù Note: Les param√®tres de d√©lib√©ration sont actuellement d√©finis par niveau.');
        $this->command->info('   √Ä l\'avenir, ils seront configurables dans les param√®tres de l\'application.');
        $this->command->info('');
    }
}
